name: persistent-chat
description: Socket to send and receive persistent messages in private and in group
version: 0.0.1
runtime: nodejs_v8
keywords:
  - chat
  - realtime

classes:
  chat_groups:
    - name: group_name
      type: string
      filter_index: true
    - name: purpose
      type: string
  group_chat:
    - name: message
      type: text
    - name: message_from
      type: reference
      target: user
      filter_index: true
    - name: group
      type: string
      target: group
      filter_index: true
  private_chat:
    - name: message
      type: text
    - name: message_from
      type: reference
      target: user
      filter_index: true
    - name: message_to
      type: reference
      target: user
      filter_index: true

endpoints:
  groups:
    private: true
    description: Endpoint to create, update and delete chat group
    inputs:
      properties:
        group_name:
          type: string
          description: Name of group, should only contain url friendly characters.(Must be less than 25 characters)
          examples:
            - syncano-devs
        purpose:
          type: string
          description: Whats group is all about (Optional)
          examples:
            - We play here
        group_id:
          type: string
          description: The id of the group (Optional for chat group update and delete)
          examples:
            - 12
    outputs:
      success:
        exit_code: 201
        description: Success
        examples:
          - |
            {
              "message": "Group successfully created"
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "message": "Group name already exists"
            }

  send-message-group:
    description: Endpoint to send message to a group
    inputs:
      properties:
        _user_key:
          type: string
          description: Token of user sending message (Optional)
          examples:
            - messageFrom@gmail.com
        username:
          type: string
          description: Name of the User (Required only when user token not sent).
          examples:
            - Nik
        message:
          type: string
          description: Chat message.
          examples:
            - How are you doing.
        room:
          type: string
          description:  Name of group, should only contain url friendly characters.
          examples:
            - group_sports
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message_text": "How are you doing",
              "username": "Nik"
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "message": "Failed to publish message"
            }
  group-chat:
    channel: group.{room}
    description: Endpoint to subcribe to poll for a group messages
    examples:
      - group.group_sports

  send-private-chat:
    description: Endpoint to send private message to user
    inputs:
      properties:
        message:
          type: string
          description: Chat message
          examples:
            - How are you
        _user_key:
          type: string
          description: Token of user sending message
          examples:
            - messageFrom@gmail.com
        message_to:
          type: string
          description: Username of user to receive message
          examples:
            - messageTo@gmail.com
    outputs:
      success:
        exit_code: 200
        description: Success
        examples:
          - |
            {
              "message_text": "How are you doing",
              "message_to": "messageTo@gmail.com"
              "message_from": "messageFrom@gmail.com"
            }
      fail:
        exit_code: 400
        description: Failed
        examples:
          - |
            {
              "message": "Failed to send message"
            }

  private-chat:
    channel: messages.{user}
    description: Endpoint to listen to user private message.
